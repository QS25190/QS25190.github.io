[{"title":"js基础","date":"2022-11-10T03:32:52.000Z","url":"/2022/11/10/js%E5%9F%BA%E7%A1%80/","tags":[["JavaScript","/tags/JavaScript/"],["基础","/tags/%E5%9F%BA%E7%A1%80/"]],"categories":[["undefined",""]],"content":"一、JavaScript 概要1. 为什么要学习 JavaScript？ HTML是一种标记语言，用来结构化我们的网页内容并赋予内容含义，例如定义段落、标题，或在页面中嵌入图片和视频。 CSS是一种样式规则语言，可将样式应用于 HTML 内容， 例如设置背景颜色和字体，在多个列中布局内容。 JavaScript是一种脚本语言，可以用来创建动态更新的内容，控制多媒体，制作图像动画，还有很多。 这三层依次建立，秩序井然。 案例：淘宝网二级菜单 1.1 JavaScript 应用场景 表单验证 网页动态效果（轮播，漂浮的广告） 记住用户名字和密码 游戏开发-经典案例俄罗斯方块 只要你看到页面中有数据的变化或者动态的效果都是 js 来实现的 2. 什么是 JavaScript 官方解释：JavaScript 是一种跨平台的脚本语言。 平台：一般指的是运行环境，这里指的是操作系统 跨平台：就是在很多种操作系统中都可以运行 脚本语言：特点是不能独立运行，需要依赖于网页。 浏览器也是 html 解析器 浏览器打开的都是 html 的页面 javascript 他必须写在 html 中 和 css 一样 ps：JavaScript 程序的运行离不开 HTML，HTML 的运行离不开浏览器。 JavaScript 是一种属于网络的脚本语言，已经被广泛用于 Web 应用开发，常用来为网页添加各式各样的动态功能，为用户提供更流畅美观的浏览效果。 作为一个 Web 开发师，如果你想提供漂亮的网页、令用户满意的上网体验，JavaScript 是必不可少的工具。 3. JavaScript 历史 1995 年 2 月，Netscape 公司发布 Netscape Navigator 2 浏览器，并在这个浏览器中免费提供了一个开发工具——LiveScript。由于当时 Java 比较流行，Netscape 便把 LiveScript 改名为 JavaScript，这也是最初的 JavaScript 1.0 版本。 由于 JavaScript 1.0 很受欢迎，Netscape 在 Netscape Navigator 3 中又发布了 JavaScript 1.1 版本。不久，微软在 Internet Explorer 3 中也加入了脚本编程功能。为了避免与 Netscape 的 JavaScript 产生纠纷，微软特意将其命名为 JScript。 1997 年，欧洲计算机制造商协会（ECMA）以 JavaScript 1.1 为基础制订了脚本语言标准——ECMA-262，并命名为 ECMAScript。 1998 年，国际标准化组织和国际电工委员会（ISO&#x2F;IEC）采用了 ECMAScript 标准（即 ISO&#x2F;IEC-16262）。自此，浏览器厂商就以 ECMAScript 作为各自 JavaScript 实现的规范标准。JavaScript 正式从各自为政走向了规范统一。 4. ECMAScript 起源1997 年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了脚本语言的实现标准，并将这种语言命名为 ECMAScript。这个版本就是 ECMAScript 1.0 版。 之所以不叫 JavaScript，主要有以下两个原因： 商标限制。Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法使用 JavaScript 这个名字，而且 JavaScript 己经被 Netscape 公司注册为商标。 体现公益性。该标准的制订者是 ECMA 组织，而不是 Netscape 公司，这样有利于确保规范的开放性和中立性。 简单概括，ECMAScript 是 JavaScript 语言的规范标准，JavaScript 是 ECMAScript 的一种实现。注意，这两个词在一般语境中是可以互换的。 5. ECMAScript 版本 1998 年 6 月，ECMAScript 2.0 版发布。 1999 年 12 月，ECMAScript 3.0 版发布，并成为 JavaScript 的通用标准，获得广泛支持。 2007 年 10 月，ECMAScript 4.0 版草案发布，对 3.0 版做了大幅升级。由于 4.0 版的目标过于激进，各方对于是否通过这个标准产生了严重分歧。 2008 年 7 月，ECMA 中止 ECMAScript 4.0 的开发，将其中涉及现有功能改善的一小部分发布为 ECMAScript 3.1。不久，ECMAScript 3.1 改名为 ECMAScript 5。 2009 年 12 月，ECMAScript 5.0 版正式发布。 2011 年 6 月，ECMAScript 5.1 版发布，并且成为 ISO 国际标准（ISO&#x2F;IEC 16262:2011）。 2013 年 12 月，ECMAScript 6 版草案发布。 2015 年 6 月，ECMAScript 6 发布正式版本，并更名为 ECMAScript 2015 。Mozilla 在这个标准的基础上推出了 JavaScript 2.0。 从此以后，JavaScript 开始以年份命名，新版本将按照 “ECMAScript+年份” 的形式发布。目前最新 版本为 ECMAScript 2018，于 2018 年 7 月正式发布。 6. 浏览器支持目前 5 大主流浏览器都支持 ECMAScript 5，具体说明如下： IE 9+ Chrome 13+ Firefox 4+ Safari 5.1+ Opera 11.60+ 7. JavaScript 构成 ECMAScript 是 JavaScript 的标准，但它并不等同于 JavaScript，也不是唯一被标准化的规范。 实际上，一个完整的 JavaScript 实现由以下 3 个不同部分组成： 核心（ECMAScript）：语言核心部分–基础语法。 文档对象模型（Document Object Model，DOM）：网页文档操作标准–利用 js 基础来实现各种动态效果。 浏览器对象模型（BOM）：客户端和浏览器窗口操作基础–浏览器窗口的使用 并不重要。 二、JavaScript 基本使用1. JavaScript 初体验 在 HTML 中，JavaScript 代码必须位于&lt;script&gt;与 &lt;/script&gt; 标签之间。 注释：旧的 JavaScript 例子也许会使用 type 属性：&lt;script type=&quot;text/javascript&quot;&gt;。 注释：type 属性不是必需的。JavaScript 是 HTML 中的默认脚本语言。 &lt;body&gt;或者&lt;head&gt;中的 JavaScript 脚本可被放置与 HTML 页面的 &lt;body&gt; 或 &lt;head&gt; 部分中，或兼而有之。 &lt;body&gt;中的 JavaScript body 部分中的脚本: 当页面被加载时执行的脚本放在 HTML 的 body 部分。放在 body 部分的脚本通常被用来生成页面的内容。 &lt;head&gt;中的 JavaScript head 部分中的脚本: 需调用才执行的脚本或事件触发执行的脚本放在 HTML 的 head 部分中。当你把脚本放在 head 部分中时，可以保证脚本在任何调用之前被加载。 body 和 head 部分可同时有脚本:文件中可以在 body 和 head 部分同时存在脚本 思考：head 和 body 中同时存在 script 文件会执行哪个？ 总结：js 文件放到哪里更好？ 浏览器对 html 页面内容的加载是顺序加载，也就是在 html 页面中前面先加载。当浏览器加载 html 文件并解析到&lt;head&gt;时,&lt;body&gt;并没有被解析,浏览器会等到&lt;head&gt;中的 js 部分执行完再加载页面。 如果把 javascript 放在 head 里的话，则先被解析,但这时候 body 还没有解析。（常规 html 结构都是 head 在前，body 在后） 从 JavaScript 对页面下载性能方向考虑：由于脚本会阻塞其他资源的下载（如图片等）和页面渲染，直到脚本全部下载并执行完成后，页面的渲染才会继续，因此推荐将所有的&lt;script&gt;标签尽可能放到&lt;body&gt;标签的底部，以尽量减少对整个页面下载的影响。 引入外部脚本文件 JS 程序不仅可以直接写在 HTML 文档中，也可以放在 JavaScript 文件中。后缀名是.js。使用任何文本编辑器都可以编辑。 JS 文件不能够单独运行，需要使用 &lt;script&gt;标签导入到网页中。 定义 src 属性的&lt;script&gt;标签不应该再含有 JavaScript 代码，否则只会下载并执行外部 JavaScript 文件，嵌入代码被忽略。 注意：在外部文件中放置脚本有如下优势： 分离了 HTML 和 js 代码 使 HTML 和 JavaScript 更易于阅读和维护 已缓存的 JavaScript 文件可加速页面加载 思考：内部 js 代码和外部引用哪个优先级更高？ 延迟执行 JS-defer &lt;script&gt;标签有一个布尔型属性 defer，这个属性的用途是表明脚本在执行时不会影响页面的构造，也就是说，脚本会被延迟到整个页面都解析完成后再运行。 因此在 script 元素中设置 defer 属性，相当于告诉浏览器立即下载，但是延迟执行 如果页面中有多个延迟脚本，那么第一个延迟脚本会先于第二个延迟脚本执行 适用于外部 JS 文件，不适用于 script 标签包含的脚本 异步加载 JS 文件-async 在默认情况下，网页都是同步加载外部 JavaScript 文件的，在引入外部 js 文件时会阻塞 dom 的执行，为此在 html4.01 为 script 标签引入了 async 属性 现在可以为&lt;script&gt;标签设置 async 属性，让浏览器异步加载 Javascript 文件，即表示应该立即下载脚本，但不应妨碍页面汇总的其它操作。只对外部脚本文件有效。 因为是下载完立即执行，不能保证多个加载时的先后顺序，因此确保异步脚本之间互不依赖 2. JavaScript 输出JavaScript 能够以不同方式“显示”数据： 使用 window.alert() 写入警告框 使用 document.write() 写入 HTML 输出 使用 innerHTML 写入 HTML 元素 使用 console.log() 写入浏览器控制台 alert 您能够使用警告框来显示数据： document.write 可以向 HTML 输出流中插入你传入的内容，浏览器会按着 HTML 元素依次顺序依次解析它们，并显示出来。 需要注意的是，如果在文档加载完成后（即 HTML 输出已完成），再使用 document.write()方法来要求浏览器来解析你的内容，则浏览器就会重写整个 document，导致最后的这个 document.write()方法输出的内容会覆盖之前所有的内容 innerHTML id 属性定义 HTML 元素。innerHTML 属性定义 HTML 内容： console.log 在浏览器中，您可使用 console.log() 方法来显示数据。 请通过 F12 来激活浏览器控制台，并在菜单中选择“控制台”。 3. JavaScript 语句格式 JavaScript 语句 JavaScript 语句由以下构成：值、运算符、表达式、关键词和注释。 分号; 如果有分号分隔，允许在同一行写多条语句： js 的代码的行长度和折行 为了达到最佳的可读性，程序员们常常喜欢把代码行控制在 80 个字符以内。 可以在文本字符串中使用反斜杠对代码行进行换行 不能像这样折行 js 空白字符 js 会忽略多个空格。您可以向脚本添加空格，以增强可读性 这两行是相等的： 在运算符旁边（ &#x3D; + - * &#x2F; ）添加空格是个好习惯： 4. JavaScript 注释 单行注释 单行注释以 &#x2F;&#x2F; 开头。 任何位于 &#x2F;&#x2F; 与行末之间的文本都会被 JavaScript 忽略（不会执行）。 多行注释 多行注释以 &#x2F;_ 开始，以 _&#x2F; 结尾。 在行末使用注释 5. JavaScript 变量思考：下列代码有什么问题？ js 变量 定义：值可以被修改的量叫做变量 格式：定义一个变量：var x = 1； x 叫做变量名，1 叫做字面量。 说明： 变量相当于容器，值相当于容器内装的东西，而变量名就是容器上贴着的标签，通过标签可以找到变量，以便读、写它存储的值 ECMAScript 的变量是松散类型（弱类型，动态类型）的,所谓松散类型就是可以用来保存任何类型的数据 声明变量 在 js 中，声明变量使用 var 语句。 案例 1：在一个 var 语句中，可以声明一个或多个变量，也可以为变量赋值，未赋值的变量初始化为 undefined（未定义）值。当声明多个变量时，应使用逗号运算符分隔。 案例 2：在 js 中，可以重复声明同一个变量，也可以反复初始化变量的值。 友情提示： 在非严格模式下，JavaScript 允许不声明变量就直接为其赋值，这是因为 JavaScript 解释器能够自动隐式声明变量。隐式声明的变量总是作为全局变量使用。 在严格模式下，变量必须先声明，然后才能使用。 “use strict”;x &#x3D; 3.14; &#x2F;&#x2F; 报错 (x 未定义) 变量的命名规范 构造变量名称（唯一标识符）的通用规则是： 名称可包含字母、数字、下划线和美元符号 名称必须以字母开头 名称也可以 $ 和 _ 开头（逗比写法） 后面可以跟字母 _ $和数字 名称对大小写敏感（Animal 和 animal 是不同的变量） 保留字（比如 JavaScript 的关键词）无法用作变量名称 提示：JavaScript 标识符对大小写敏感。 js 标识符 系统征用的有特殊功能的单词. 标识符指的是变量、函数、属性的名字，或者函数的参数。 标识符命名规范 第一个字符必须是一个字母、下划线（_）或一个美元符号（$），其他字符可以是字母、下划线、美元符号或数字 不能含有空格 不能以关键字或保留字命名 保留关键字 *标记的关键字是 ECMAScript5 中新添加的。 应该避免使用 JavaScript 内置的对象、属性和方法的名称作为 Javascript 的变量或函数名： 命名规范 标识符命名要做到顾名思义。 起一个有意义的名字，尽量做到看一眼就知道是什么意思(提高代码可 读性) 比如: 名字 就定义为 name , 定义学生 用 student 遵守一定的命名规范。 驼峰命名法，又分为大驼峰命名法和小驼峰命名法 小驼峰式命名法（lower camel case）： 第一个单词以小写字母开始；第二个单词的首字母大写，例如：myName、aDog 大驼峰式命名法（upper camel case）： 每一个单字的首字母都采用大写字母，例如：FirstName、LastName. 下划线 user_name 赋值变量 使用等号=运算符可以为变量赋值，等号左侧为变量，右侧为被赋的值。 变量提升 JavaScript 在预编译期会先预处理声明的变量 注意：声明变量放在最后，赋值操作放在前面。由于 JavaScript 在预编译期已经对变量声明语句进行了预解析，所以第一行代码读取变量值时不会抛出异常，而是返回未初始化的值 undefined。第三行代码是在赋值操作之后读取，故显示为 Barry。JavaScript 引擎的解析方式是：先解析代码，获取所有被声明的变量，然后再一行一行地运行。 这样，所有声明的变量都会被提升到代码的头部，这就叫作变量提升。 练习 1：看看结果是什么？ 练习 2：将两个变量 a,b 的值交换，var a &#x3D; 1; var b &#x3D; 2; 方案 1： 方案 2： 6. JavaScript 的变量类型JavaScript 的数据类型分为两种： **值类型(基本数据类型)**：字符串（String）、数字(Number)、布尔(Boolean)、未定义（Undefined）、空（Null）、Symbol。 注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。 引用数据类型：对象(Object)、数组(Array)、函数(Function) 字符串 字符串可以是引号中的任意文本。您可以使用单引号或双引号： var name = &quot;张三&quot; var name = &#39;李四&#39; 特殊书写方式-俗称:屌丝写法 var name = &#39;王二&quot;麻子&quot;&#39; var name = &quot;你是&#39;小淘气&#39;&quot; 不允许var name = &#39;田七&quot; 不允许var name = &quot;田七&#39; 不允许var name = &quot;&quot;田&quot;七&quot; 不允许var name = &#39;&#39;田&#39;七&#39; 如果某屌丝就想写，可以使用转义字符var name = &quot;\\&quot;田\\&quot;七&quot; 思考：两次结果一致吗？ 数字 JavaScript 只有一种数字类型。数字可以带小数点，也可以不带： 整数： var a = 1; 浮点数： var a = 1.2; 科学计数法 var a = 123e5; var b = Number.MAX_VALUE var a = 123e-5; var b = Number.MIN_VALUE 布尔 布尔（逻辑）只能有两个值：true 或 false。 var b = true var b = false Undefined var u； null var n = null 类型是 object，用来表示一个空的对象 7. JavaScript 的变量类型高级 字符串 JavaScript 字符串(String)就是由零个或多个Unicode 字符组成的字符序列。零个字符表示空字符串。 字符串字面量&#x2F;字符串直接量 字符串必须包含在单引号或双引号中 如果字符串包含在双引号中,则字符串内可以包含单引号;反之,也可以在单引号中包含双引号 在 ECMAScript 3 中,字符串必须在一行内表示,换行表示是不允许的，如果要换行显示字符串,可以在字符串中添加换行符(\\n) 在 ECMAScript 5 中,字符串允许多行表示.实现方法:在换行结尾处添加反斜杠(\\).反斜杠和换行符不作为字符串直接量的内容 在字符串中插入特殊字符,需要使用转义字符,如单引号,双引号等 字符串中每个字符都有固定的位置.第 1 个字符的下标位置为 0,第 2 个字符的下标位置为 1…···以此类推,最后一个字符的下标位置是字符串长度减 1 转义字符 转义字符是字符的一种间接表示方式。在特殊语境中,无法直接使用字符自身 如果在一个正常字符前添加反斜杠,JavaScript 会忽略该反斜杠 字符串操作 借助 String 类型的原型方法,可以灵活操作字符串（后面各章节中详细介绍） 在 JavaScript 中,可以使用加号(+)运算符连接两个字符串 使用字符串的 length 属性获取字符串的字符个数(长度） 在 ES5 中，字符串可以作为只读数组使用，可以通过中括号运算符添加下标访问某一个值。下标从 0 开始，最大位置的下标是 length-1 String 方法 String 方法是可以将其他类型转换成字符串类型 数字 数字（Number）也称为数值或者数 当数字直接出现在程序中时，被称为数值直接量。在 JavaScript 程序中，直接输入的任何数字都被视为数值直接量。 JavaScript 中的所有数字都是以 64 位浮点数形式存储，包括整数。例如，2 与 2.0 是同一个数。 浮点数溢出 执行数值计算时，要防止浮点数溢出。例如，0.1+0.2 并不等于 0.3。 num = 0.1+0.2; //0.30000000000000004 这是因为 JavaScript 遵循二进制浮点数算术标准（IEEE 754）而导致的问题。这个标准适合很多应用，但它违背了数字基本常识。 解决方法：浮点数中的整数运算是精确的，所以小数表现出来的问题可以通过指定精度来避免。例如，针对上面的相加可以这样进行处理。 a = (1+2)/10; //0.3 这种处理经常在货币计算中用到。例如，元可以通过乘以 100 而转成分，然后就可以准确地将每项相加，求和后的结果可以除以 100 再转换回元 特殊数值 Infinity 计算超出范围会得到无穷大(infinity)或者无穷小(-infinity) 分母为 0 会构成无穷大 Infinity 或负无穷大-Infinity 关于 Infinity 的运算， 无法计算 加减乘除一个数字都是 Infinity，Infinity 和 Infinity 计算，加法乘法为 Infinity，其他为 NaN Infinity 和自身相等 其他比较正常 NaN NaN,即非数值(Not a Number)是一个特殊的数值 这个数值用于表示一个本来要返回数值的操作数未返回数值的情况(这样就不会抛出错误了) NaN 特点：无论和谁比较都是 fasle 无论和谁计算都是 NaN isNaN isNaN 方法检测一个值是不是非纯数字 , 如果非纯数字就返回 true 如果是纯数字就返回 false 最大值最小值 在 js 中数字也是有最大值和最小值的支持的，如果超过最大值或最小值，就可能计算有误 正无穷负无穷 布尔 布尔类型仅包含两个固定的值：true和false。其中true代表真，false代表假。 在一些判断等操作中，需要使用布尔值 Undefined 变量被声明了，但没有赋值时，就等于 undefined null null 类型是第二个只有一个值的数据类型，这个特殊的值是 null。 从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用 typeof 操作符检测 null 时会返回”object”的原因 扩展： 8. JavaScript 判断数据类型 友情提示: 基本数据类型：String，、Number、Boolean、Undefined、Null、Symbol 引用数据类型 ：Object 数组 函数 typeof typeof 可以识别出基本类型 String，、Number、Boolean、Undefined、Symbol，但是不能识别 null。不能识别引用数据类型，会把 null、array、object 统一归为 object 类型,但是可以识别出 function。 所以 typeof 可以用来识别一些基本类型 instanceof instanceof 不能识别出基本的数据类型 String，、Number、Boolean、Undefined、Null、Symbol 但是可以检测出引用类型，如 array、object、function，同时对于是使用 new 声明的类型，它还可以检测出多层继承关系。 判断某对象是否是某类 其实也很好理解，js 的继承都是采用原型链来继承的。比如 Dog instanceof Animal ，其实就是看 objA 的原型链上是否有 A 的原型，而 A 的原型上保留 A 的 constructor 属性。 所以 instanceof 一般用来检测对象类型，以及继承关系. constructor null、undefined 没有 construstor 方法，因此 constructor 不能判断 undefined 和 null。 toString 此方法可以相对较全的判断 js 的数据类型。 总结：至于在项目中使用哪个判断，还是要看使用场景，具体的选择，一般基本的类型可以选择 typeof，引用类型可以使用 instanceof。 9. JavaScript 数据类型转换 Number 方法 Number()方法 将其他类型转换成 number 类型 Number 方法会返回一个转换后的值 parseInt parseInt 是一个全局方法,它可以把值转换为整数 第 1 步,先解析位置 0 处的字符,如果不是有效数字,则直接返回 NaN. 第 2 步,如果位置 0 处的字符是数字,或者可以转换为有效数字,则继续解析位置 1 处的字符,如果不是有效数字,则直接返回位置 0 处的有效数字。 第 3 步,以此类推,按从左到右的顺序,逐个分析每个字符,直到发现非数字字符为止。 第 4 步,parseInt()将把前面分析合法的数字字符全部转换为数值并返回。 parseFloat()也是一个全局方法，它可以把值转换成浮点数，即它能够识别第一个出现的小数点，而第二个小数点视为非法。解析过程和 parseInt 相同。 运算符转换 如果变量乘以 1，则变量会被 JS 自动转换成数值，如果无法转换成合法数值，则返回 NaN 10. JavaScript 运算符 JS 中为我们定义了一套对数据进行运算的运算符,共定义了 47 个运算符。 1. 算数运算符 说明： 递增(++)和递减(–)运算就是通过不断地加 1 或减 1,然后把结果赋值给左侧，以实现改变自身结果的一种简洁方法 递增和递减在运算之前都会试图转换值为数值类型,如果失败则返回 NaN。 根据位置不同,可以分为 4 种运算方式 前置递增(++n):先加一,再赋值 后置递增(n++):先赋值,再加一 前置递减(–n):先减一,再赋值 后置递减(n–):先赋值,再减一 一元运算符：一个操作数 ++ – 前++(–)或者后++(–)都是自身+1(-1)再给自身赋值 对于 a，前++(–)和后++(–)都是自身+1(-1)再赋值给自己 对于 b，前++(–),a 先+1(-1)赋值给自己后再参与后面的计算。后++(–)，要看后面的算式是否再次用到 a，如果用到，才把之前的后++(–)算上。 练习： &#96;&#96;&#96;jsvar a &#x3D; 1;var b &#x3D; a++ + ++a + a + a++; &#x2F;&#x2F;1+3+3+3console.log(a); &#x2F;&#x2F;4console.log(b); &#x2F;&#x2F;10 &#96;&#96;&#96;html Title var a = 1; b = a++ + a++ + 1 + ++a + a++ + ++a + a + ++a; console.log(a); console.log(b); 相加两个数字，将返回和，但对一个数字和一个字符串相加将返回一个字符串： 4. 比较运算符 5. 逻辑运算符&amp;&amp; 当多个条件时,必须所有条件都是 true,整个结果才是 true,只要有一个条件时 false,整个结果就是 false || 当多个条件时,只要有一个条件是 true,整个结果就是 true,只有所有条件都是 false 时,整个结果才是 false ! 取反 6. 逗号运算符逗号运算符是二元运算符，它能够先执行运算符左侧的操作数，然后再执行右侧的操作数，最后返回右侧操作数的值。 等价于 练习：观察结果 7. 特殊情况:比较不同的类型如果将字符串与数字进行比较，那么在做比较时 JavaScript 会把字符串转换为数值。空字符串将被转换为 0。非数值字符串将被转换为始终为 false 的 NaN。 8. 案例练习 优先级 任意数据类型和 NaN 做数学运算,结果都是 NaN,但是注意只要是字符串在和任意数据类型做相加+的运算,都是字符串拼接。字符串类型的数据:在进行数学运算(- * &#x2F; %)时,会先将自身隐式转换(Number)成数值类型再进行计算在进行+操作时,是字符串的拼接 布尔类型的数据:在进行数学运算(+ - * &#x2F; %)时,会先将自身隐式转换(Number)成数值类型再进行计算 未定义类型的数据:在进行数学运算(+ - * &#x2F; %)时,会先将自身隐式转换(Number)成数值类型再进行计算 空类型的数据:在进行数学运算(+ - * &#x2F; %)时,会先将自身隐式转换(Number)成数值 类型再进行计算 任意数据类型在进行关系运算时,会先将自身隐式转换(Number)成数值,在进行比较字符串与字符串之间的比较&lt; &gt; &lt;&#x3D; &gt;&#x3D;,比较的是 ascii 码,一位一位的去比 练习题 规则: 数学运算转 Number, 字符串与任意类型数据相加都是拼接 关系运算转 Number,字符串与字符串转 Ascii 码 逻辑运算转 Boolean 短路表达式: &amp;&amp; 与 如果前面的表达式结果是 true,返回的是后面表达式的数据，如果前面的表达式结果是 false,直接返回数据 || 或 如果前面的表达式是 ture,直接返回数据，如果前面的表达式是 false,返回的是后面表达式的数据 ! 取反 "},{"title":"Hello World","date":"2022-10-10T06:23:38.760Z","url":"/2022/10/10/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]